import os
import telebot
import json
import time
import re
from telebot import types
from openai import OpenAI  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–∞–∫–µ—Ç OpenAI
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

os.environ['HTTP_PROXY'] = "http://127.0.0.1:2080"
os.environ['HTTPS_PROXY'] = "http://127.0.0.1:2080"

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ config.json
def load_config():
    script_dir = os.path.dirname(os.path.abspath(__file__))
    config_path = os.path.join(script_dir, "config.json")
    logger.info(f"–ü—ã—Ç–∞—é—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑: {config_path}")
    if os.path.exists(config_path):
        with open(config_path, "r", encoding='utf-8') as config_file:
            try:
                config = json.load(config_file)
                logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
                return config
            except json.JSONDecodeError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ config.json: {e}")
                return {}
    else:
        logger.error("–§–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return {}

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ config.json
def save_config(config):
    script_dir = os.path.dirname(os.path.abspath(__file__))
    config_path = os.path.join(script_dir, "config.json")
    with open(config_path, "w", encoding='utf-8') as config_file:
        json.dump(config, config_file, indent=4, ensure_ascii=False)
    logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config = load_config()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–ª—é—á–µ–π –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
missing_keys = []
if "TELEGRAM_BOT_TOKEN" not in config:
    missing_keys.append("TELEGRAM_BOT_TOKEN")
if "OPENAI_API_KEY" not in config:
    missing_keys.append("OPENAI_API_KEY")

if missing_keys:
    raise KeyError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–ª—é—á–∏ –≤ config.json: {', '.join(missing_keys)}")

# –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
TELEGRAM_BOT_TOKEN = config["TELEGRAM_BOT_TOKEN"]
OPENAI_API_KEY = config["OPENAI_API_KEY"]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI API –∫–ª—é—á–∞
client = OpenAI(api_key=OPENAI_API_KEY)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}

# –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫
URL_REGEX = re.compile(r'(https?://[^\s]+)')
POST_LINK_REGEX = re.compile(r'(https?://tg\.c/[^\s]+)')

# –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class User:
    def __init__(self, user_id):
        self.user_id = user_id
        self.mode = 'main'
        self.history_for_gpt_mode = []
        self.info_message = []
        self.current_info_message = {
            'user_text': None,
            'forwarded_text': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
            'link': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
            'timestamp': None
        }

    def to_dict(self):
        return {
            'user_id': self.user_id,
            'mode': self.mode,
            'info_message': self.info_message
        }

    @staticmethod
    def from_dict(data):
        user = User(data['user_id'])
        user.mode = data.get('mode', 'main')
        user.info_message = data.get('info_message', [])
        return user

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
def load_user_data():
    if "user_data" in config:
        for user_id_str, user_info in config["user_data"].items():
            try:
                user_id = int(user_id_str)
                user = User.from_dict(user_info)
                user_data[user_id] = user
                logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {user_id}")
            except ValueError:
                logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π user_id: {user_id_str}")
    else:
        config["user_data"] = {}
    logger.info("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
def save_user_data():
    config["user_data"] = {str(user_id): user.to_dict() for user_id, user in user_data.items()}
    save_config(config)
    logger.info("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")

load_user_data()

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
main_menu_keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
button_add_info = types.KeyboardButton('Add Info')
button_ask_gpt = types.KeyboardButton('Ask GPT')
main_menu_keyboard.add(button_add_info, button_ask_gpt)

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
exit_keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
exit_button = types.KeyboardButton('Exit to main menu')
exit_keyboard.add(exit_button)

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ä–µ–∂–∏–º–∞ —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
info_keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
show_info_button = types.KeyboardButton('Show Info')
clear_info_button = types.KeyboardButton('Clear Info')  # –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ 'Clear Info'
info_keyboard.add(show_info_button, clear_info_button, exit_button)


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫
def extract_links(text):
    return URL_REGEX.findall(text)

def extract_post_links(text):
    return POST_LINK_REGEX.findall(text)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≥–∏–ø–µ—Ä—Å—Å—ã–ª–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç '—Å–ª–æ–≤–æ (—Å—Å—ã–ª–∫–∞)'
def convert_links(text):
    text = re.sub(r'<a href="([^"]+)">([^<]+)</a>', r'\2 (\1)', text)
    return text

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
def structuring_function(info):
    structured_text = ""
    for entry in info:
        if isinstance(entry, dict):
            user_text = entry.get('user_text', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            forwarded_text = entry.get('forwarded_text', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            link = entry.get('link', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        elif isinstance(entry, (list, tuple)):
            try:
                user_text, forwarded_text, link = entry
            except ValueError:
                user_text, forwarded_text, link = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        else:
            user_text, forwarded_text, link = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        structured_text += f"1. –ú–æ–π —Ç–µ–∫—Å—Ç:\n{user_text}\n"
        structured_text += f"2. –¢–µ–∫—Å—Ç –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º–æ–≥–æ –ø–æ—Å—Ç–∞:\n{forwarded_text}\n"
        structured_text += f"3. –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç:\n{link}\n\n"
    
    return structured_text.strip()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≤ —Ä–µ–∂–∏–º–µ 'info'
def request_info_mode(user, user_message):
    history_openai_format = [
        {
            "role": "user",
            "content": "–ü—Ä–∏–≤–µ—Ç, —Ç–≤–æ—è –∑–∞–¥–∞—á–∞ –ø–æ–º–æ–≥–∞—Ç—å –º–Ω–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å, –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—É—á–∞–µ–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –∏–Ω–æ—Ñ—Ä–º–∞—Ü–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤ –≤–æ—Ç —Ç–∞–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:  1. –ú–æ–π —Ç–µ–∫—Å—Ç: –¢–µ–∫—Å—Ç –º–æ–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–≤ –∫–æ—Ç–æ—Ä—ã–π —Ç—ã –ø–æ–π–º–µ—à—å, —á—Ç–æ –Ω—É–∂–Ω–æ —Å –Ω–∏–º —Å–¥–µ–ª–∞—Ç—å. –î–æ–±–∞–≤–∏—Ç—å –≤ –ö–∞–ª–µ–Ω–¥–∞—Ä—å, –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –ó–∞–º–µ—Ç–∫–∏, –¥—Ä—É–≥—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–ª–∏ —á—Ç–æ-—Ç–æ –µ—â–µ. 2. –¢–µ–∫—Å—Ç –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º–æ–≥–æ –ø–æ—Å—Ç–∞: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ  ( —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ –ø–æ—Å—Ç–∞ –Ω–µ—Ç ) 3. –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ  ( —Ç–∞–∫ –∫–∞–∫ –ø–æ—Å—Ç–∞ –Ω–µ—Ç, —Ç–æ –Ω–µ—Ç –∏ —Å—Å—ã–ª–∫–∏ ) 1. –ú–æ–π —Ç–µ–∫—Å—Ç: –ú–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å –ø–æ—Ç–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä —è —Ö–æ—á—É –≤–µ—á–µ—Ä–æ–º –ø–æ—Å—Ç–∞–≤–∏—Ç—å —ç—Ç–∏ –≤–∏–¥–µ–æ —Å–µ–±–µ –Ω–∞ –æ–±–æ–∏. 2. –¢–µ–∫—Å—Ç –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º–æ–≥–æ –ø–æ—Å—Ç–∞: (–µ—Å–ª–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–µ—Ç, —Ç–æ –ø—Ä–æ—Å—Ç–æ —Å—Å—ã–ª–∫–∞) 3. –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç: https://t.me/c/2107490410/2732 1. –ú–æ–π —Ç–µ–∫—Å—Ç: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ  ( –º–æ–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç, –∑–Ω–∞—á–∏—Ç —è —Ö–æ—á—É –ø—Ä–æ—Å—Ç–æ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–µ. –ø–æ–ø—Ä–æ–±—É–π –∫—Ä–∞—Ç–∫–æ –∏–∑–ª–æ–∂–∏—Ç—å –æ —á–µ–º —ç—Ç–æ—Ç –ø–æ—Å—Ç, –∞ —Ç–∞–∫–∂–µ –ø–æ–Ω—è—Ç—å –¥–ª—è —á–µ–≥–æ —è —Ç–µ–±–µ –µ–≥–æ –ø—Ä–∏—Å–ª–∞–ª) 2. –¢–µ–∫—Å—Ç –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º–æ–≥–æ –ø–æ—Å—Ç–∞: Apple AirPods 2 13900 > –æ—Ç 7800 https://fas.st/3BG5c4?erid=25H8d7vbP8SRTvJ4Q27doN 3. –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç: https://t.me/c/1785748423/2313  –§–æ—Ä–º–∞—Ç—å –≤—ã–≤–æ–¥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–µ–¥—É—é—â–∏–º:  ‚ùóÔ∏è –í–∞–∂–Ω–æ–µ ‚ùóÔ∏è ‚ûï —Ç–µ–∫—Å—Ç –≤–∞–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —è –ø–æ–º–µ—á–∞—é —Å–ª–æ–≤–æ–º –≤–∞–∂–Ω–æ üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ‚ûï–î–∞—Ç–∞, –≤—Ä–µ–º—è, –¥–µ–π—Å—Ç–≤–∏–µ ‚ûñ ( –æ—Ç–º–µ–Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è)  —Å–æ–±—ã—Ç–∏–µ üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å ‚ûï –î–∞—Ç–∞ 07:00, 21 —á–∏—Å–ª–∞, —Ç–∏–ø –∫–∞–ª–µ–Ω–¥–∞—Ä—è [–£—á–µ–±–∞,–†–∞–±–æ—á–∏–π,–î–æ–º–∞—à–Ω–∏–µ –¥–µ–ª–∞,–£—á–µ–Ω–∏–∫–∏,–°–æ–±—ã—Ç–∏—è,–ó–∞–ª,–î–µ–ª–∞], —É –Ø—É–∑—ã —Å –∫–µ–Ω—Ç–∞–º–∏ ( –º–æ–∂–Ω–æ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å) ‚ûï 17:00, –∑–∞–≤—Ç—Ä–∞ ( –¥–∞—Ç—É –Ω–∞–ø–∏—à–∏) , –†–∞–±–æ—á–∏–π , —Å–æ–≤–µ—â–∞–Ω–∏–µ üóí –ó–∞–º–µ—Ç–∫–∏ ‚ûï –ø–∞–ø–∫–∞ [[–ó–∞–º–µ—Ç–∫–∏,–î–æ–∫—É–º–µ–Ω—Ç—ã,–ü—Ä–æ–µ–∫—Ç—ã,–ñ–∏–∑–Ω—å,–†–∞–±–æ—Ç–∞] –µ—Å–ª–∏ –ø–∏—à–µ—Ç—Å—è –ø—Ä–æ–µ–∫—Ç–æ —Ç–æ —è —É–∫–∞–∑—ã–≤–∞—é –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ç—ã —Ç–æ–∂–µ —É–∫–∞–∑—ã–≤–∞–π –≤ –∫—Ä–∞—Å–∏–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, —Ç–æ–∂–µ —Å–∞–º–æ–µ —Å –†–∞–±–æ—Ç–æ–π. - –∑–∞–º–µ—Ç–∫–∞ —Ñ–∏–ª—å–º—ã: ¬´–ê—Ç–∞–∫–∞ –¢–∏—Ç–∞–Ω–æ–≤: –ü–æ—Å–ª–µ–¥–Ω—è—è –ê—Ç–∞–∫–∞¬ª –≤—ã–π–¥–µ—Ç –≤ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–∞—Ö, –º–∏—Ä–æ–≤–∞—è –ø—Ä–µ–º—å–µ—Ä–∞ 8 –Ω–æ—è–±—Ä—è. ‚ûï –ü—Ä–æ–µ–∫—Ç—ã nelegal - —Ö–æ—á—É –∏–∑–º–µ–Ω–∏—Ç—å –±–æ—Ç–∞, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Å—Å—ã–ª–∫–µ: [–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∞—Ç–µ—Ä–∏–∞–ª—É] ( —Å—Å—ã–ª–∫—É –≤—Å–µ —Ä–∞–≤–Ω–æ –ø—Ä–∏—Å—ã–ª–∞–π –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–µ–π) (–Ω—É–∂–µ–Ω —Å–º–∞–π–ª–∏–∫) –î—Ä—É–≥–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚ûï –Ø —Ö–æ—á—É –ø–æ—á–∏—Ç–∞—Ç—å –∫–Ω–∏–≥—É –≤–µ—á–µ—Ä–æ–º ‚ûï –Ω—É–∂–Ω–æ –Ω–∞—á–∞—Ç—å —Ö–æ–¥–∏—Ç –≤ –∑–∞–ª üìé –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å –ø–æ—Å—Ç–∞–º–∏ --- (—Å–Ω–∏–π –∫—Ä—É–∂–æ–∫ —Å–º–∞–π–ª–∏–∫) –ú–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ç–µ–º—É –ø–æ—Å—Ç–∞ (—Å–º–∞–π–ª–∏–∫ —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å —Ç–µ–º–æ–π –ø–æ—Å—Ç–∞) –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Å–∞–º –Ω–∞–ø–∏—à–µ—à—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—è –ø–æ—Å—Ç –°—Å—ã–ª–∫–∞: (https://t.me/c/1103688715/20974) --- (—Å–Ω–∏–π –∫—Ä—É–∂–æ–∫ —Å–º–∞–π–ª–∏–∫) –ú–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ç–µ–º—É –ø–æ—Å—Ç–∞ (–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –Ω–µ–ª—å–∑—è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç, –ø—Ä–æ—Å—Ç–æ —Å—Å—ã–ª–∫–∞ –∏–¥–µ—Ç) (–∫—Ä–∞—Å–Ω—ã–π –∫—Ä—É–∂–æ–∫ —Å–º–∞–π–ª–∏–∫)–°—Å—ã–ª–∫–∞: (https://t.me/c/2192407202/2794) --- (–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –Ω–µ–ª—å–∑—è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç, –ø—Ä–æ—Å—Ç–æ —Å—Å—ã–ª–∫–∞ –∏–¥–µ—Ç) (–∫—Ä–∞—Å–Ω—ã–π –∫—Ä—É–∂–æ–∫ —Å–º–∞–π–ª–∏–∫)–°—Å—ã–ª–∫–∞: (https://t.me/c/2192407202/2794)  –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –º–æ–∂–µ—à—å –ø—Ä–∏–¥—É–º–∞—Ç—å —Å–∞–º. –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ —Ç—ã –ø–æ–ª—É—á–∏—à—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–≤–µ—Ç—å –ª–∏—à—å –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –∏ —Ç–æ–≥–¥–∞ —è –Ω–∞—á–Ω—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ç—ã –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ—à—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å –ø–æ—Ç–æ–º –∏–¥–µ—Ç –≤ –∑–∞–º–µ—Ç–∫–∏, —É–∫–∞–∑—ã–≤–∞–π —Å—Ä–∞–∑—É –≤ –∑–∞–º–µ—Ç–∫–∞—Ö –ø–æ—Å—Ç, –∞ —Å–Ω–∏–∑—É –Ω–µ —É–∫–∞–∑—ã–≤–∞–π."
        }
    ]
    
    history_openai_format.append({"role": "assistant", "content": "–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ."})
    history_openai_format.append({"role": "user", "content": user_message})
    response = client.chat.completions.create(
        model="gpt-4o",
        messages=history_openai_format,
        temperature=0.8
    )
    return response.choices[0].message.content

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≤ —Ä–µ–∂–∏–º–µ 'gpt'
def request_gpt_mode(user, user_message):
    history_openai_format = user.history_for_gpt_mode.copy()
    history_openai_format.append({"role": "user", "content": user_message})

    response = client.chat.completions.create(
        model="gpt-4o",
        messages=history_openai_format,
        temperature=0.8
    )
    assistant_message = response.choices[0].message.content

    history_openai_format.append({"role": "assistant", "content": assistant_message})
    user.history_for_gpt_mode = history_openai_format

    return assistant_message

# –û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
def get_message_link(message):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –≥—Ä—É–ø–ø—ã, –æ—Ç–∫—É–¥–∞ –±—ã–ª–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç forward_from_chat.id (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å -100) –∏ forward_from_message_id.
    –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–µ –≤ —Ä–µ–∂–∏–º–µ 'info', —è–≤–ª—è—é—Ç—Å—è –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–º–∏ –∏–∑ –∫–∞–Ω–∞–ª–æ–≤ –∏–ª–∏ –≥—Ä—É–ø–ø.
    """
    if not message.forward_from_chat or not message.forward_from_message_id:
        # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –∏–∑ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –≥—Ä—É–ø–ø—ã
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –∏–∑ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –≥—Ä—É–ø–ø—ã.")
        return None

    original_chat_id = message.forward_from_chat.id
    original_message_id = message.forward_from_message_id

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å '-100' –∏–∑ chat_id
    chat_id_str = str(original_chat_id)[4:]

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É
    return f"https://t.me/c/{chat_id_str}/{original_message_id}"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=["start"])
def start(message):
    user_id = message.from_user.id
    if user_id not in user_data:
        user_data[user_id] = User(user_id)
        logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: {user_id}")
    bot.send_message(
        message.chat.id,
        text=f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –ú–µ–Ω—è –∑–æ–≤—É—Ç nelegal.",
        reply_markup=main_menu_keyboard
    )

# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True, content_types=['text', 'photo', 'video', 'document', 'audio', 'voice', 'sticker', 'video_note'])
def handle_messages(message):
    user_id = message.from_user.id

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if user_id not in user_data:
        user_data[user_id] = User(user_id)
        logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: {user_id}")

    user = user_data[user_id]

    logger.info(f"–¢–µ–∫—É—â–µ–µ info_message: {user.info_message}") 
    logger.info(f"–¢–µ–∫—É—â–µ–µ current_info_message: {user.current_info_message}")

    # –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
    if user.mode == 'main':
        if message.text == 'Add Info':
            user.mode = 'info'
            bot.send_message(
                message.chat.id,
                text="–í—ã –≤–æ—à–ª–∏ –≤ —Ä–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –í—Å–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.",
                reply_markup=exit_keyboard
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–µ—Ä–µ–∫–ª—é—á–∏–ª—Å—è –≤ —Ä–µ–∂–∏–º 'info'")
        elif message.text == 'Ask GPT':
            user.mode = 'gpt'
            user.history_for_gpt_mode = []  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é GPT
            bot.send_message(
                message.chat.id,
                text="–í—ã –≤–æ—à–ª–∏ –≤ —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è —Å GPT. –ó–∞–¥–∞–≤–∞–π—Ç–µ —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã.",
                reply_markup=exit_keyboard
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–µ—Ä–µ–∫–ª—é—á–∏–ª—Å—è –≤ —Ä–µ–∂–∏–º 'gpt'")
        else:
            bot.send_message(
                message.chat.id,
                text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –º–µ–Ω—é.",
                reply_markup=main_menu_keyboard
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –æ–ø—Ü–∏—é –≤ —Ä–µ–∂–∏–º–µ 'main'")

    elif user.mode == 'info':
        now = time.time()
        time_window = 1  # –í—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        if user.current_info_message['timestamp'] is not None and (now - user.current_info_message['timestamp'] > time_window):
            if user.current_info_message['user_text'] or user.current_info_message['forwarded_text'] != '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ':
                user.info_message.append({
                    'user_text': user.current_info_message['user_text'] if user.current_info_message['user_text'] else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                    'forwarded_text': user.current_info_message['forwarded_text'],
                    'link': user.current_info_message['link']
                })
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –≤ info_message –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            user.current_info_message = {
                'user_text': None,
                'forwarded_text': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                'link': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                'timestamp': None
            }

        user.current_info_message['timestamp'] = now

        if message.text == 'Exit to main menu':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            if user.current_info_message['user_text'] or user.current_info_message['forwarded_text'] != '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ':
                user.info_message.append({
                    'user_text': user.current_info_message['user_text'] if user.current_info_message['user_text'] else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                    'forwarded_text': user.current_info_message['forwarded_text'],
                    'link': user.current_info_message['link']
                })
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –≤ info_message –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            user.current_info_message = {
                'user_text': None,
                'forwarded_text': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                'link': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                'timestamp': None
            }

            user.mode = 'main'
            bot.send_message(
                message.chat.id,
                text="–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.",
                reply_markup=main_menu_keyboard
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã—à–µ–ª –∏–∑ —Ä–µ–∂–∏–º–∞ 'info' –≤ 'main'")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ config.json
            save_user_data()

        elif message.text == 'Show Info':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã 'Show Info'
            if user.current_info_message['user_text'] or user.current_info_message['forwarded_text'] != '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ':
                user.info_message.append({
                    'user_text': user.current_info_message['user_text'] if user.current_info_message['user_text'] else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                    'forwarded_text': user.current_info_message['forwarded_text'],
                    'link': user.current_info_message['link']
                })
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –≤ info_message –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            user.current_info_message = {
                'user_text': None,
                'forwarded_text': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                'link': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                'timestamp': None
            }

            if not user.info_message:
                bot.send_message(
                    message.chat.id,
                    text="–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.",
                    reply_markup=info_keyboard
                )
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –Ω–æ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
            else:
                info = structuring_function(user.info_message)
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç '—Å–ª–æ–≤–æ (—Å—Å—ã–ª–∫–∞)'
                info_with_links = convert_links(info)
                answer = request_info_mode(user, info_with_links)
                bot.send_message(message.chat.id, answer)
                # –û—Å—Ç–∞–≤–ª—è–µ–º info_message –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞
                bot.send_message(
                    message.chat.id,
                    text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–∫–∞–∑–∞–Ω–∞. –í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ 'Exit to main menu'.",
                    reply_markup=info_keyboard
                )
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ config.json
            save_user_data()

        elif message.text == 'Clear Info':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã 'Clear Info'
            if user.info_message:
                user.info_message = user.info_message[:1]  # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ config.json
                save_user_data()
                bot.send_message(
                    message.chat.id,
                    text="–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞, –æ—Å—Ç–∞–≤–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
                    reply_markup=info_keyboard
                )
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—á–∏—Å—Ç–∏–ª –∏—Å—Ç–æ—Ä–∏—é 'info_message', –æ—Å—Ç–∞–≤–∏–≤ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            else:
                bot.send_message(
                    message.chat.id,
                    text="–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏.",
                    reply_markup=info_keyboard
                )
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é, –Ω–æ 'info_message' –ø—É—Å—Ç.")

        else:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –∏—Ö
            if message.content_type == 'text':
                if message.forward_from or message.forward_from_chat:
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                    forwarded_text = message.text.strip()
                    user.current_info_message['forwarded_text'] = forwarded_text
                    logger.info(f"–°–æ—Ö—Ä–∞–Ω—ë–Ω —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {forwarded_text}")
                    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏
                    link = get_message_link(message)
                    if link:
                        user.current_info_message['link'] = link
                        logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å—Å—ã–ª–∫–∞: {link} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    else:
                        user.current_info_message['link'] = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                        logger.info(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                else:
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    text = message.text.strip()
                    user.current_info_message['user_text'] = text
                    logger.info(f"–°–æ—Ö—Ä–∞–Ω—ë–Ω –º–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {text}")

                bot.send_message(
                    message.chat.id,
                    text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ 'Exit to main menu'.",
                    reply_markup=info_keyboard
                )

            elif message.content_type in ['photo', 'video', 'document', 'audio', 'voice', 'video_note', 'sticker']:
                if message.forward_from or message.forward_from_chat:
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                    forwarded_text = message.caption.strip() if message.caption else ''
                    user.current_info_message['forwarded_text'] = forwarded_text
                    logger.info(f"–°–æ—Ö—Ä–∞–Ω—ë–Ω —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ –º–µ–¥–∏–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {forwarded_text}")
                    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏
                    link = get_message_link(message)
                    if link:
                        user.current_info_message['link'] = link
                        logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å—Å—ã–ª–∫–∞: {link} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    else:
                        user.current_info_message['link'] = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                        logger.info(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                else:
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    text = message.caption.strip() if message.caption else ''
                    user.current_info_message['user_text'] = text
                    logger.info(f"–°–æ—Ö—Ä–∞–Ω—ë–Ω –º–æ–π —Ç–µ–∫—Å—Ç –∏–∑ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {text}")

                bot.send_message(
                    message.chat.id,
                    text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ 'Exit to main menu'.",
                    reply_markup=info_keyboard
                )

            else:
                bot.send_message(
                    message.chat.id,
                    text="–¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –º–µ–¥–∏–∞.",
                    reply_markup=info_keyboard
                )
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è.")

    elif user.mode == 'gpt':
        if message.content_type == "text":
            if message.text == "Exit to main menu":
                user.mode = "main"
                user.history_for_gpt_mode = []  # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é GPT
                bot.send_message(
                    message.chat.id,
                    text="–î–æ —Å–≤–∏–¥–∞–Ω–∏—è.",
                    reply_markup=main_menu_keyboard
                )
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã—à–µ–ª –∏–∑ —Ä–µ–∂–∏–º–∞ 'gpt' –≤ 'main'")
            else:
                user_message = message.text
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è GPT: {user_message}")
                response_text = request_gpt_mode(user, user_message)
                bot.send_message(
                    message.chat.id,
                    text=response_text,
                    reply_markup=exit_keyboard
                )
                logger.info(f"–û—Ç–≤–µ—Ç GPT –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        else:
            bot.send_message(
                message.chat.id,
                text="–í —Ä–µ–∂–∏–º–µ –æ–±—â–µ–Ω–∏—è —Å GPT –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.",
                reply_markup=exit_keyboard
            )
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ 'gpt'.")

    else:
        user.mode = 'main'
        bot.send_message(
            message.chat.id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í—ã –±—ã–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=main_menu_keyboard
        )
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –±—ã–ª –≤–æ–∑–≤—Ä–∞—â—ë–Ω –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞.")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    save_user_data()
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling()
